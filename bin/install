#!/usr/bin/env bash

set -Eeuo pipefail

fail() {
  echo "Fail: $*"
  exit 1
}

# required environment variables
: "${ASDF_INSTALL_TYPE?}"
: "${ASDF_INSTALL_VERSION?}"
: "${ASDF_INSTALL_PATH?}"

# detect the tool name
readonly __dirname="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly toolname="$(basename "$(dirname "${__dirname}")")"

# make a temporary download directory with a cleanup hook
readonly TMP_DOWNLOAD_DIR="$(mktemp -d -t "asdf_${toolname}_XXXXXX")"
trap 'rm -rf "${TMP_DOWNLOAD_DIR?}"' EXIT

install() {
  local -r install_type="$1"
  local -r version="$2"
  local -r install_path="$3"

  if [ "$install_type" != "version" ]; then
    fail "asdf-hashicorp supports release installs only"
  fi

  local -r bin_install_path="${install_path}/bin"
  local -r download_url="$(get_download_url "${version}")"
  local -r download_path="${TMP_DOWNLOAD_DIR}/$(get_filename "${version}")"

  echo "Downloading ${toolname} version ${version} from ${download_url}"
  if curl -fs "${download_url}" -o "${download_path}"; then
     
    echo "Checking signatures"
    if $(check_sig $version); then
        echo "OK"
    else
      exit 100
    fi

    echo "Cleaning ${toolname} previous binaries"
    rm -rf "${bin_install_path:?}/${toolname}"

    echo "Creating ${toolname} bin directory"
    mkdir -p "${bin_install_path}"

    echo "Extracting ${toolname} archive"
    unzip -qq "${download_path}" -d "${bin_install_path}"
  else
    echo "Error: ${toolname} version ${version} not found" >&2
    exit 1
  fi
}

get_platform() {
  if [ "$OSTYPE" == "msys" ]; then
    echo windows
  else
    uname | tr '[:upper:]' '[:lower:]'
  fi
}

get_arch() {
  local -r machine="$(uname -m)"
  if [[ $machine == "arm64" ]] || [[ $machine == "aarch64" ]]; then
    echo "arm64"
  elif [[ $machine == *"arm"* ]] || [[ $machine == *"aarch"* ]]; then
    echo "arm"
  elif [[ $machine == *"386"* ]]; then
    echo "386"
  else
    echo "amd64"
  fi
}

get_filename() {
  local -r version="$1"
  local -r platform="$(get_platform)"
  local -r arch="$(get_arch)"
  echo "${toolname}_${version}_${platform}_${arch}.zip"
}

get_download_url() {
  local -r version="$1"
  local -r filename="$(get_filename "${version}")"
  local -r releases_host="https://releases.hashicorp.com"

  if ! curl -fs "${releases_host}/${toolname}/${version}/${filename}" >/dev/null && [[ ${filename} == *"arm64"* ]]; then
    echo "https://releases.hashicorp.com/${toolname}/${version}/${filename//arm64/arm}"
  else
    echo "https://releases.hashicorp.com/${toolname}/${version}/${filename}"
  fi
}

check_sig() {
  local -r distributer="https://releases.hashicorp.com"
  local -r sha256sums_url="${distributer}/${toolname}/${version}/${toolname}_${version}_SHA256SUMS"
  local -r signature_url="${distributer}/${toolname}/${version}/${toolname}_${version}_SHA256SUMS.sig"

  curl -s $sha256sums_url -o $TMP_DOWNLOAD_DIR/$(basename $sha256sums_url)
  curl -s $signature_url -o $TMP_DOWNLOAD_DIR/$(basename $signature_url)

  gpg --keyserver pool.sks-keyservers.net\
      --recv-keys "C874 011F 0AB4 0511 0D02 1055 3436 5D94 72D7 468F"

  cd $TMP_DOWNLOAD_DIR;
  gpg --verify-files $TMP_DOWNLOAD_DIR/$(basename $signature_url)
  sha256sum --ignore-missing -c $TMP_DOWNLOAD_DIR/$(basename sha256sums_url)
  { echo "Verification ERROR" > /dev/stderr; exit 100 ; }
}


install "${ASDF_INSTALL_TYPE}" "${ASDF_INSTALL_VERSION}" "${ASDF_INSTALL_PATH}"
